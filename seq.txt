seq = ['AACTCAGCGCAGCCGCCGCCCGCGCACGAACGAGCCCAGCA',
       'CCGGCCGGATGGAGCGTCCGCAACCCGACAGGCAAGCGCGGGGCGCGGGACGCGGGACCTTTCT',
       'CTCACACAGCGGAGCCAG',
       'AAACTTGGGCTCTGGAGTCAGGAGGTGCGGGGTTCTGATCCTGCCTGTGCCCGTAGGGAGGGA',
       'GGAACGGTAATTTACATGCCTGGCACCCTGGTATGCGGTTGGTGACCAAGATGGGAGTGTCAGAGTA',
       'TCCAGTCTTTGAGGTAGCCAATTTTTCTGCT',
       'GAATCTAGATCTCTGGGGCTCTGCCAGCCTGGGGGAGCATGCTTGGTTCTCCTGTCCCTC',
       'ACTAGCTACGGAGGACCTGAGCCAGACATCACCCTGGCTGCGGTGTTCCATGTCTCACCAGT',
       'TCAGGGAGGCGACATGCCCAAGAGTGCTCAGTTAGCTGGTGTCAGACCTTGGTCTGC',
       'CCACCTCCAGGTCTCACTCATTCCCTTCTTTCAATAATTTGTTAGTATTTTTTTTTTTAACTGGGCT',
       'TAAGACTT',
       'TGACCAGCTGTGTTGTAGAACAGGGAAGCAGGGCAGGAGAAAAGGGAAAAATGACTGTGGGGAGG',
       'CAGGGATACGGACCCATGACAGAAATACTCCCAGAAAGACTTTTTCTTTGACTAAAGCAGACTTCTCAG',
       'GCTTTTTAACCCTGACGCCTTCGATAGGGGGTCATGAGATTTGCATCTGGAACT',
       'TTAACAAAATAACTGAATTAAAAAGCCAATCAAAGCCG',
       'GTTCATGGGGCTGCTGCTTCTTCCTGGGTTATGCTGTACCCTCCTCTCCACTGCGAACTACCTGT',
       'ACCAGGATTTCCCCCTTGGTTTGGGGGACTGTATTATTTAGTGTAATGACTGAAGAGTGTTTACAAA',
       'GCTGCGAGAGCCACCATGCCCAGCCGAATTTGTTTTGTTTTTTTGTTTTTTTGCTTTTTT',
       'GCTTTTCTTTTTTTGAGATGGAGTGTTGCTCTGTTGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTC',
       'ACTGCAACCTCTGCCTCCTGGGTTCAAGCGATTCTCCTGCCTCAGCCTAGTTGGGATTACAGG',
       'CGCCCACTACCATGCCCGGCTATTTTTTTTTTTTTTTTTGTATTTTTAGTAGAGATAGGGTTTACCATG',
       'TTGGCCAGGCTGGGCTCAAACTCCTGTCAGCCTCCCAAAGTGCTAGGAT',
       'TACAGGCGTGAGCCACCTCTCTG',
       'TCACCAAGTCTGGAGTGCAGTGGTGTGATCTCAGCTCACTGCAACCTCTGCCTCCGTTAAGCAATT',
       'ACAGGCATAATTGCTGGGATTACAGGCACCTGCCACCATGCCCGGCTAATTTTTGTAGTAGAGA',
       'CGGGGTTTCACCATGTTTGCCAGGCTGGTCCTGCCTTGGCCTC',
       'CCAAAGCGCTGGGATTACAGGCGTGACCACCGTGCCCAGCCACAAGGCTGC']
       
________________________________________________________________________________________________________________________________________________    
       
### cadena de caracteres: `ATGTTACCCCCCGCTGCAGCG`
#### `.` = coincide con cualquier caracter: <b style="font-size:1.5vw"><font color = red>ATG.T ⇨ ATGTT</font></b>
#### `^` = coincide con el inicio de la cadena: <b style="font-size:1.5vw"><font color = red>^ATG.T ⇨ ATGTT</font></b>
#### `$` = coincide con el final de la cadena; <b style="font-size:1.5vw"><font color = red>GCG$ ⇨ GCG</font></b>
#### `*` = coincide con cero o más ocurrencias del caracter anterior: <b style="font-size:1.5vw"><font color = red>AC* ⇨ A, ACCCCCC, A</font></b>
AC* coincidirá con "A", "AC" o "A" seguido de cualquier número de "C".
#### `+`  = coincide con una o más ocurrencias del último caracter: <b style="font-size:1.5vw"><font color = red>AC+ ⇨ ACCCCCC</font></b>
#### `{x}` = coincide con exactamente x ocurrencias del patrón: <b style="font-size:1.5vw"><font color = red>(C){3} ⇨ CCC, CCC</font></b>
#### `{x, y}` = coincide con al menos x y no más de y ocurrencias: <b style="font-size:1.5vw"><font color = red>T{1,2} ⇨ T, TT, T</font></b>
#### `[]` =  coincide con un conjunto de caracteres: <b style="font-size:1.5vw"><font color = red>[A-Z] ⇨ ATGTTACCCCCCGCTGCAGCG</font></b>
#### `|` = permite definir opciones para el patrón: <b style="font-size:1.5vw"><font color = red>TT|CG ⇨ TT, CG, CG</font></b>

________________________________________________________________________________________________________________________________________________
       
la función re
La función re provee herramientas de expresiones regulares para un procesamiento avanzado de cadenas, manipulación y coincidencias complejas.
re.sub('patrón/es', 'nuevo', string)

Busca todas las coincidencias de un patrón desde el principio de la cadena de caracteres y sustituye las coincidencias con un nuevo texto, y devuelve una cadena de caracteres con el texto modificado
re.search('patrón/es', string)

Busca un patrón desde el principio de la cadena de caracteres y al encontrar la primera conicidencia, regresa un objeto
re.findall('patrón/es', string)

Busca todas las coincidencias de un patrón desde el principio de la cadena de caracteres y devuelve una lista con todas las coincidencias
re.finditer('patrón/es', string)

Busca todas las coincidencias de un patrón desde el principio de la cadena de caracteres y devuelve un iterador con todas las coincidencias
re.split('patrón', string)

Busca todas las coincidencias de un patrón desde el principio de la cadena de caracteres y separa los elementos utilizando al patrón como separador. Este regresa una lista de cadenas de caracteres con los textos separados por coma ,. En caso de no encontrar coincidencias, regresa un objeto de tipo list con el texto original.  
