tabla = """
DH	AA	-7.9
DH	AC	-8.4
DH	AG	-7.8
DH	AT	-7.2
DH	CA	-8.5
DH	CC	-8.0
DH	CG	-10.6
DH	CT	-7.8
DH	GA	-8.2
DH	GC	-9.8
DH	GG	-8.0
DH	GT	-8.4
DH	TA	-7.2
DH	TC	-8.2
DH	TG	-8.5
DH	TT	-7.9
DS	AA	-22.2
DS	AC	-22.4
DS	AG	-21.0
DS	AT	-20.4
DS	CA	-22.7
DS	CC	-19.9
DS	CG	-27.2
DS	CT	-21.0
DS	GA	-22.2
DS	GC	-24.4
DS	GG	-19.9
DS	GT	-22.4
DS	TA	-21.3
DS	TC	-22.2
DS	TG	-22.7
DS	TT	-22.2
"""

#----------------------------------------------------------------------------------

dict_dh = {}
dict_ds = {}
for i in tabla.split('\n'):
    if 'DH' in i:
        dict_dh[i.split('\t')[1]] = float(i.split('\t')[2])
    if 'DS' in i:
        dict_ds[i.split('\t')[1]] = float(i.split('\t')[2])

#----------------------------------------------------------------------------------

def cg_calc(seq = ''):
    gc = float(seq.count("G") + seq.count("C")) / len(seq) * 100
    return round(gc, 1)
def tm_calc(oligo = '', Na = 50, Mg = 0, conc_primer = 250):
    """
    Adaptado de http://www.biophp.org/
    * Melting Temperature (Tm) Calculator
    Na mM
    Mg mM
    conc_primer nM
    
    Base-Stacking Melting Temperature (Tm) Calculations
    This aproximation uses Thermodynamical concepts to compute Tm.

    The following references were used to develop the script:
    
    https://www.ncbi.nlm.nih.gov/pmc/articles/PMC19045/
    SantaLucia J. A unified view of polymer, dumbbell, and oligonucleotide DNA nearest-neighbor thermodynamics.
    Proc Natl Acad Sci U S A. 1998 Feb 17;95(4):1460-5.NCBI von Ahsen N, Oellerich M, Armstrong VW, Sch√ºtz E. 
    Application of a thermodynamic nearest-neighbor model to estimate nucleic acid 
    stability and optimize probe design: prediction of melting points of multiple 
    mutations of apolipoprotein B-3500 and factor V with a hybridization probe genotyping assay on the LightCycler.
    Clin Chem. 1999 Dec;45(12):2094-101.NCBI 
    
    """
    dh_sum = 0
    ds_sum = 0
    for e, i in enumerate(oligo):
        kmer = oligo[e:e+2]
        if len(kmer) == 2:
            dh_sum += dict_dh[kmer]
            ds_sum += dict_ds[kmer]
    if (oligo[0] == 'C') or (oligo[0] == 'G'):
        dh_sum+=0.1
        ds_sum+=-2.8
    if (oligo[0] == 'A') or (oligo[0] == 'T'):
        dh_sum+=2.3
        ds_sum+=4.1
    if (oligo[-1] == 'C') or (oligo[-1] == 'G'):
        dh_sum+=0.1
        ds_sum+=-2.8
    if (oligo[-1] == 'A') or (oligo[-1] == 'T'):
        dh_sum+=2.3
        ds_sum+=4.1
    salt_effect = (Na / 1000) + ((Mg / 1000) * 140)
    ds_sum += 0.368 * (len(oligo)-1)* math.log(salt_effect)
    tm_ = round(((1000 * dh_sum) / (ds_sum + (1.987 * math.log(conc_primer / 2000000000)))) -273.15, 2)
    return tm_


#----------------------------------------------------------------------------------

def alig(s1 = '', s2 = ''):
    simi = [a+1 for a, b in enumerate(zip(s1, s2)) if b[0] == b[1]]
    return simi

#----------------------------------------------------------------------------------

dict_seq = {'BBA_01658': u['BBA_01658'],
            'BBA_09174': u['BBA_09174'],
            'BBA_03121': u['BBA_03121']}
dict_seq

#----------------------------------------------------------------------------------

CombinacioneS = []
for i in list(dict_seq.keys()):
    for j in list(dict_seq.keys()):
        if i != j:
            CombinacioneS.append([(i, j)])

#----------------------------------------------------------------------------------

size_oligo = 21
tm_select = 54
tm_tolerance = 0.5 # tm
amplicon_min = 200
amplicon_optimo = 250
amplicon_max = 300
ext_3prim_free = round(1 - 0.9, 2) # el 0.9 quiere decir que el 90% del extremo 3' sea libre
print(ext_3prim_free)
min_tm_select = tm_select - tm_tolerance
max_tm_select = tm_select + tm_tolerance
gc_per = 60

#----------------------------------------------------------------------------------

sequences = {}
for s in dict_seq:
    seq = dict_seq[s]
    s_size = len(seq)
    n = size_oligo
    secs = []
    for e, i in enumerate(range(len(seq))):
        if len(seq[e:n]) == size_oligo:
            sec = seq[e:n]
            gc = cg_calc(seq = sec)
            temp = tm_calc(oligo = sec, Na = 50, Mg = 0, conc_primer = 200)
            if gc < gc_per:
                if min_tm_select <= temp <= max_tm_select:
                    secs.append(sec)
            n += 1
    sequences[s] = secs

#---------------------------------------------------

ALL_COMPARATIONS = {}
for c in CombinacioneS:
    c = c[0]
    pair_comparison  = []
    X, Y = c[0], c[1]
    for e, s1 in enumerate(sequences[X]):
        for n, s2 in enumerate(sequences[Y]):
            simi = alig(s1 = s1, s2 = s2)
            inter = set(simi) & set(list(range(int(size_oligo * ext_3prim_free), size_oligo + 1))) # 
            if len(inter) == 0: # solo pasan los que no comparten despues de la posicion 10
                #pair_comparison.append([{X: s1}, {Y: s2}, simi])
                pair_comparison.append([X, s1, Y, s2, simi])
    ALL_COMPARATIONS[X+'_vs_'+Y] = pair_comparison

#---------------------------------------------------

record = []
for c in CombinacioneS:
    c = c[0]
    X, Y = c[0], c[1]
    for l in [i[3] for i in ALL_COMPARATIONS[X+'_vs_'+Y]]:
        record.append(l)
#---------------------------------------------------
oligos_final = []
for c in CombinacioneS:
    c = c[0]
    X, Y = c[0], c[1]
    for s1 in set([i[1] for i in ALL_COMPARATIONS[X+'_vs_'+Y]]):
        for s2 in list(set(record)):
            simi = alig(s1 = s1, s2 = s2)
            inter = set(simi) & set(list(range(int(size_oligo * ext_3prim_free), size_oligo + 1)))
            if len(inter) == 0:
                temp = tm_calc(oligo = s1, Na = 50, Mg = 0, conc_primer = 200)
                gc = cg_calc(seq = s1)
                pos = [(i.start()+1, i.end()) for i in re.finditer(s1, dict_seq[X])]
                oligos_final.append([X, s1, temp, gc, pos[0][0], pos[0][1]])
#---------------------------------------------------
#time_fin(i = init)
#---------------------------------------------------
forwards = DataFrame(oligos_final, columns = ['id', 'seq', 'tm', 'gc', 'start', 'end']).drop_duplicates()
forwards = forwards.sort_values(by = ['id', 'start'], ascending = True).reset_index(drop = True)
for i in forwards.id.unique():
    print(i, 'Oligos =', len(forwards[forwards.id == i].seq.unique()))

forwards

#----------------------------------------------------------------------------------
