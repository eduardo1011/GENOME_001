def blast_data_plot(frame = DataFrame([]), x_title = 'title'):
    #fig = plt.figure()
    
    ax = plt.axes()

    x = (frame.mismatch / frame.length) * 100
    x1 = (frame.nident / frame.qlen) * 100
    y = frame.pident
    

    p = np.poly1d(np.polyfit(x, y, 1))
    p1 = np.poly1d(np.polyfit(x1, y, 1))

    plt.scatter(x, y, s=5, c='darkblue', alpha=0.7, linewidths =0)
    plt.scatter(x1, y, s=5, c='darkgreen', alpha=0.7, linewidths =0)
    
    
    plt.text(100, 100, "    R = "+str(np.round(np.corrcoef(x, y)[0,][1], 3)),
             fontsize = 10, weight="bold", color = 'darkblue')
    plt.text(100, 90, "    R = "+str(np.round(np.corrcoef(x1, y)[0,][1], 3)),
             fontsize = 10, weight="bold", color = 'darkgreen')
    plt.text(100, 80, '  '+str(len(set(frame.Entry.tolist())))+' Proteins',
             fontsize = 10, weight="bold", color = 'black',
            horizontalalignment='left')

    plt.plot(x,p(x),"r-", linewidth=1)
    plt.plot(x1,p1(x1),"r-", linewidth=1)

    #lt.xlabel("Mismatch/Alignment length (%)\nNumber of identical matches/Query length (%)", fontsize = 10, weight="bold")


    plt.ylabel("Identity (%)", fontsize = 10, weight="bold")
    plt.xlabel(x_title, fontsize = 10, weight="bold")

    plt.gca().spines['right'].set_visible(False)
    plt.gca().spines['top'].set_visible(False)
